//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Runtime"",
            ""id"": ""8c94b28c-cce3-49d3-a222-e57980609a17"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fba53f0e-0b27-4ef8-aebd-abf990155c3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Stop Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a8f16c0f-2d19-4f0b-aba8-0ae4cce21556"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""14835567-48e7-4969-aed7-868ee9bd4f7f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76f6a232-2d44-4765-b720-6de5cadf29fd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45dd6183-9d3e-42ff-b1f6-717a1566353a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c9bb3f8-80dc-488d-b6d5-c8128a4e3475"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Runtime
        m_Runtime = asset.FindActionMap("Runtime", throwIfNotFound: true);
        m_Runtime_Jump = m_Runtime.FindAction("Jump", throwIfNotFound: true);
        m_Runtime_StopJump = m_Runtime.FindAction("Stop Jump", throwIfNotFound: true);
        m_Runtime_Aim = m_Runtime.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Runtime
    private readonly InputActionMap m_Runtime;
    private List<IRuntimeActions> m_RuntimeActionsCallbackInterfaces = new List<IRuntimeActions>();
    private readonly InputAction m_Runtime_Jump;
    private readonly InputAction m_Runtime_StopJump;
    private readonly InputAction m_Runtime_Aim;
    public struct RuntimeActions
    {
        private @PlayerInputs m_Wrapper;
        public RuntimeActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Runtime_Jump;
        public InputAction @StopJump => m_Wrapper.m_Runtime_StopJump;
        public InputAction @Aim => m_Wrapper.m_Runtime_Aim;
        public InputActionMap Get() { return m_Wrapper.m_Runtime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RuntimeActions set) { return set.Get(); }
        public void AddCallbacks(IRuntimeActions instance)
        {
            if (instance == null || m_Wrapper.m_RuntimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RuntimeActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @StopJump.started += instance.OnStopJump;
            @StopJump.performed += instance.OnStopJump;
            @StopJump.canceled += instance.OnStopJump;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
        }

        private void UnregisterCallbacks(IRuntimeActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @StopJump.started -= instance.OnStopJump;
            @StopJump.performed -= instance.OnStopJump;
            @StopJump.canceled -= instance.OnStopJump;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
        }

        public void RemoveCallbacks(IRuntimeActions instance)
        {
            if (m_Wrapper.m_RuntimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRuntimeActions instance)
        {
            foreach (var item in m_Wrapper.m_RuntimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RuntimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RuntimeActions @Runtime => new RuntimeActions(this);
    public interface IRuntimeActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnStopJump(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
